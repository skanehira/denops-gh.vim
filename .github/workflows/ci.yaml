name: ci

env:
  DENO_DIR: ".deno"

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  pull_request:
    paths-ignore:
      - 'README.md'
jobs:
  lint:
    strategy:
      matrix:
        runner:
          - ubuntu-latest
        version:
          - "1.x"
    name: deno lint
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.version }}
      - name: run lint
        run: deno lint
  test:
    strategy:
      matrix:
        runner:
          #- windows-latest
          - macos-latest
          - ubuntu-latest
        version:
          - "1.x"
        host_version:
          - vim: "v8.2.3081"
            nvim: "v0.5.0"
    runs-on: ${{ matrix.runner }}
    steps:
      - run: git config --global core.autocrlf false
        if: runner.os == 'Windows'
      - uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: "${{ matrix.version }}"
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ matrix.version }}-${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-deno-${{ matrix.version }}-
            ${{ runner.os }}-deno-
      - uses: thinca/action-setup-vim@v1
        id: vim
        with:
          vim_type: "Vim"
          vim_version: "${{ matrix.host_version.vim }}"
          download: "never"
      - name: Check Vim
        run: |
          echo ${DENOPS_TEST_VIM}
          ${DENOPS_TEST_VIM} --version
        env:
          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable_path }}
      - uses: thinca/action-setup-vim@v1
        id: nvim
        with:
          vim_type: "Neovim"
          vim_version: "${{ matrix.host_version.nvim }}"
      - name: Check Neovim
        run: |
          echo ${DENOPS_TEST_NVIM}
          ${DENOPS_TEST_NVIM} --version
        env:
          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable_path }}
      - name: Clone denops
        id: denops
        run: |
          git clone https://github.com/vim-denops/denops.vim $HOME/denops.vim
          echo "::set-output name=path::$HOME/denops.vim"
      - name: Test
        run: |
          mkdir -p $HOME/.config/gh
          cat <<EOF > $HOME/.config/gh/hosts.yml
          github.com:
            oauth_token: $GH_TOKEN
            user: skanehira
          EOF
          make test
        env:
          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable }}
          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable }}
          DENOPS_PATH: ${{ steps.denops.outputs.path }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        timeout-minutes: 5
