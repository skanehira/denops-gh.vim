*gh.txt*       Vim/Neovim plugin for GitHub

Author: skanehira <sho19921005@gmail.com>
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
CONTENTS                                  *gh-contents*

INTRODUCTION                              |gh-introduction|
USAGE                                     |gh-usage|
INTERFACE                                 |gh-interface|
  VARIABLES                                 |gh-variables|
  BUFFER                                    |gh-buffers|
  KEY-MAPPINGS                              |gh-key-mappings|
  FUNCTIONS                                 |gh-functions|
TODO                                      |gh-todo|
CHANGELOG                                 |gh-changelog|


==============================================================================
INTRODUCTION                              *gh-introduction*

*gh.vim* is a Vim/Neovim plugin for GitHub

Latest version:
https://github.com/skanehira/denops-gh.vim


==============================================================================
USAGE                                     *gh-usage*

SETUP
                                          *gh-setup*

At first time, you have to install gh(https://github.com/cli/cli)
and setup auth token. Please refer oficall documents.

==============================================================================
INTERFACE                                 *gh-interface*

------------------------------------------------------------------------------
VARIABLES                                 *gh-variables*


------------------------------------------------------------------------------
BUFFER                                    *gh-buffer*

                                          *gh-buffer-issue-list*
gh://{owner}/{repo}/issues
  Show {owner}/{repo} issues.
  You can do some actions, like edit, open issue in browser and search.

  NOTE: About search action.
    You can use search feature when typing 's' in issue list buffer.
    Then you can use qualifiers to find specific issues in issue search buffer.
    Exmaple, if you input 'state:closed label:bug', it would show issues
    that state is closed and label is bug
    Please refer bellow to know more qualifiers.
      https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests

    In issue search buffer, you can enable auto complements for some
    qualifiers.

>
      augroup gh_autocmd
        au!
        au User gh_open_issues_search call EnableAutoCompletionForSearchIssue()
      augroup END

      function! EnableAutoCompletionForSearchIssue() abort
        call ddc#custom#patch_buffer('sources', ['gh_issues_search'])
        call ddc#custom#patch_buffer('specialBufferCompletion', v:true)
        call ddc#custom#patch_buffer('sourceOptions', {
              \ 'gh_issues_search': {
                \  'minAutoCompleteLength': 1,
                \  'minKeywordLength': v:true,
                \  'isVolatile': v:true
              \ }})
        " If you want to complements with japanese, you should add keywordPattern
        call ddc#custom#patch_buffer({'keywordPattern':
              \ "[a-zA-Z0-9_À-ÿ\u30a0-\u30ff\u3040-\u309f\u3005-\u3006\u30e0-\u9fcf]*"})

        " If matsui54/denops-popup-preview.vim is installed,
        " you can preview issue body's info.
        call popup_preview#enable()

        " remove 'preview' from completeopt
        let b:old_completeopt = &completeopt
        set completeopt-=preview
      endfunction
<

                                          *gh-buffer-issue-edit*
gh://{owner}/{repo}/issues/{number}
  Edit issue body.
  When you type |:write|, then issue body would be updated.

  If you want to auto complements issue number and user name on buffer,
  please install Shougo/ddc.vim and add settings like bellow to your vimrc.

  NOTE: Also you can use 'matsui54/denops-popup-preview.vim' to preview
        issue's body in popup/float window
>
  augroup gh_autocmd
    au!
    autocmd User gh_open_issue call EnableAutoCompletion()
  augroup END

  function! EnableAutoCompletion() abort
    " Enable source 'gh_issues' to current buffer.
    call ddc#custom#patch_buffer('sources', ['gh_issues'])
    call ddc#custom#patch_buffer('sourceOptions', {
          \ 'gh_issues': {
            \  'matcherKey': 'menu'
            \  'minAutoCompleteLength': 1,
          \ }})
    call ddc#custom#patch_buffer('specialBufferCompletion', v:true)
    " If you want to complements with japanese, you should add keywordPattern
    call ddc#custom#patch_buffer({'keywordPattern':
          \ "[a-zA-Z0-9_À-ÿ\u30a0-\u30ff\u3040-\u309f\u3005-\u3006\u30e0-\u9fcf]*"})

    " If matsui54/denops-popup-preview.vim is installed,
    " you can preview issue body's info.
    call popup_preview#enable()

    " remove 'preview' from completeopt
    set completeopt-=preview
  endfunction
<

  Then, you can auto complements issue titles and user names likes bellow.
  '#Add' would complements issues that title is start with 'Add..'
  '@sk' would complements user that name is start with 'sk...'

                                          *gh-buffer-issue-new*
gh://{owner}/{repo}/issues/new
  Create a new issue.
  If {owner}/{repo} has issue templates, you can chose it and edit
  template body.
  When you type |:write|, then 'gh' would be executed in terminal, and
  you can chose any options(e.g add labels).

                                          *gh-buffer-issue-comment-list*
gh://{owner}/{repo}/issues/:number/comments
  TODO

                                          *gh-buffer-issue-comment-new*
gh://{owner}/{repo}/issues/:number/comments/new
  TODO

                                          *gh-buffer-issue-comment-edit*
gh://{owner}/{repo}/issues/:number/comments/:id
  TODO

                                          *gh-buffer-pull-list*
gh://{owner}/{repo}/pulls
  TODO

                                          *gh-buffer-repo-readme*
gh://{owner}/{repo}
  TODO

                                          *gh-buffer-action-list*
gh://{owner}/{repo}/actions
  TODO

                                          *gh-buffer-file-list*
gh://{owner}/{repo}/[:branch|:tree_sha]/files
  TODO

                                          *gh-buffer-gist-list*
gh://{owner}/gists[?privacy=public]
  TODO

                                          *gh-buffer-gist*
gh://{owner}/gists/:id
  TODO

--------------------------------------------------------------------
KEY-MAPPINGS                              *gh-key-mappings*

TODO

default mappings

{buffer}                {mode}     {lhs}     {rhs}
--------------------------------------------------------------------
|gh-buffer-issue-list|    normal     e         <Plug>(gh-issue-edit)
                        normal     n         <Plug>(gh-issue-new)
                        normal     o         <Plug>(gh-issue-open)
                        normal     <C-j>     <Plug>(gh-issue-select-next)
                        normal     <C-k>     <Plug>(gh-issue-select-prev)
                        normal     y         <Plug>(gh-issue-yank)
			normal     s         <Plug>(gh-issue-search)

--------------------------------------------------------------------
FUNCTIONS                                 *gh-functions*


==============================================================================
TODO                                      *gh-todo*



==============================================================================
CHANGELOG                                 *gh-changelog*


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
